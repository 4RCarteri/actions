name: SQL Lint and Fix

on:
  push:
    branches:
      - main
    paths:
      - 'Databases/**/*.sql'
  pull_request:
  workflow_dispatch:

jobs:
  test-check:
    name: runner / sqlfluff (github-check)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Busca hist√≥rico completo para compara√ß√£o
      
      - name: "Setup SQLFluff config"
        shell: bash
        run: |
          # Cria configura√ß√£o do SQLFluff se n√£o existir
          if [ ! -f ".sqlfluff" ]; then
            cat > .sqlfluff << EOF
          [sqlfluff]
          dialect = ansi
          templater = jinja
          sql_file_exts = .sql,.SQL
          
          [sqlfluff:indentation]
          indent_unit = space
          tab_space_size = 4
          
          [sqlfluff:rules]
          capitalisation_policy = upper
          EOF
            echo "Arquivo .sqlfluff criado"
          fi
      
      - uses: yu-iskw/action-sqlfluff@v5
        id: lint-sql
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          sqlfluff_version: "3.4.2"
          sqlfluff_command: "fix" # Or "lint"
          paths: "${{ github.workspace }}/Databases"
          level: "info"
          filter_mode: "file"
          reviewdog_version: "v0.20.2"
          file_pattern: '\.sql$'
          dialect: "ansi"
      - name: "Show outputs (Optional)"
        shell: bash
        run: |
          echo '${{ steps.lint-sql.outputs.sqlfluff-results }}' | jq -r '.'
          echo '${{ steps.lint-sql.outputs.sqlfluff-results-rdjson }}' | jq -r '.'
      
      - name: "Create PR Review with SQLFluff suggestions"
        if: github.event_name == 'pull_request' && steps.lint-sql.outputs.sqlfluff-results != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Parse SQLFluff results
            const results = JSON.parse('${{ steps.lint-sql.outputs.sqlfluff-results }}');
            
            if (!results || results.length === 0) {
              console.log('Nenhum issue encontrado pelo SQLFluff');
              return;
            }
            
            // Group issues by file
            const fileIssues = {};
            results.forEach(issue => {
              if (!fileIssues[issue.path]) {
                fileIssues[issue.path] = [];
              }
              fileIssues[issue.path].push(issue);
            });
            
            // Create review comments for each file
            const comments = [];
            for (const [filePath, issues] of Object.entries(fileIssues)) {
              issues.forEach(issue => {
                const comment = {
                  path: filePath.replace('${{ github.workspace }}/', ''),
                  line: issue.line || 1,
                  body: `**SQLFluff ${issue.severity}**: ${issue.message}\n\n` +
                        `**Regra**: \`${issue.rule}\`\n\n` +
                        (issue.suggestion ? `**Sugest√£o**: ${issue.suggestion}\n\n` : '') +
                        `Para corrigir automaticamente, execute:\n` +
                        `\`\`\`bash\n` +
                        `sqlfluff fix ${filePath.replace('${{ github.workspace }}/', '')}\n` +
                        `\`\`\``
                };
                comments.push(comment);
              });
            }
            
            // Submit review with comments
            if (comments.length > 0) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                event: 'REQUEST_CHANGES',
                body: `## SQLFluff Review\n\n` +
                      `Encontrei ${results.length} issue(s) SQL que precisam ser corrigidos:\n\n` +
                      `- **Arquivos afetados**: ${Object.keys(fileIssues).length}\n` +
                      `- **Issues por severidade**:\n` +
                      results.reduce((acc, issue) => {
                        acc[issue.severity] = (acc[issue.severity] || 0) + 1;
                        return acc;
                      }, Object.create(null)).ERROR ? `  - Errors: ${results.filter(r => r.severity === 'ERROR').length}\n` : '' +
                      results.reduce((acc, issue) => {
                        acc[issue.severity] = (acc[issue.severity] || 0) + 1;
                        return acc;
                      }, Object.create(null)).WARNING ? `  - Warnings: ${results.filter(r => r.severity === 'WARNING').length}\n` : '' +
                      results.reduce((acc, issue) => {
                        acc[issue.severity] = (acc[issue.severity] || 0) + 1;
                        return acc;
                      }, Object.create(null)).INFO ? `  - Info: ${results.filter(r => r.severity === 'INFO').length}\n` : '' +
                      `\n**Para corrigir todos os issues automaticamente:**\n` +
                      `\`\`\`bash\n` +
                      `sqlfluff fix Databases/\n` +
                      `\`\`\``,
                comments: comments
              });
              
              console.log(`Review criado com ${comments.length} coment√°rios`);
            }
      
      - name: "Create PR comment with summary"
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = JSON.parse('${{ steps.lint-sql.outputs.sqlfluff-results }}' || '[]');
            
            let commentBody = `## üîç SQLFluff Analysis Results\n\n`;
            
            if (results.length === 0) {
              commentBody += `‚úÖ **Excelente!** Nenhum issue encontrado nos arquivos SQL.\n\n`;
              commentBody += `Todos os arquivos SQL est√£o seguindo as melhores pr√°ticas de formata√ß√£o e sintaxe.`;
            } else {
              const errorCount = results.filter(r => r.severity === 'ERROR').length;
              const warningCount = results.filter(r => r.severity === 'WARNING').length;
              const infoCount = results.filter(r => r.severity === 'INFO').length;
              
              commentBody += `‚ùå **${results.length} issue(s) encontrado(s)**\n\n`;
              commentBody += `### Resumo por Severidade\n`;
              if (errorCount > 0) commentBody += `- üö® **Errors**: ${errorCount}\n`;
              if (warningCount > 0) commentBody += `- ‚ö†Ô∏è **Warnings**: ${warningCount}\n`;
              if (infoCount > 0) commentBody += `- ‚ÑπÔ∏è **Info**: ${infoCount}\n`;
              
              commentBody += `\n### Corre√ß√£o R√°pida\n`;
              commentBody += `Para corrigir automaticamente todos os issues:\n\n`;
              commentBody += `\`\`\`bash\n`;
              commentBody += `# Instalar SQLFluff\n`;
              commentBody += `pip install sqlfluff\n\n`;
              commentBody += `# Corrigir todos os arquivos\n`;
              commentBody += `sqlfluff fix Databases/ --dialect ansi\n`;
              commentBody += `\`\`\`\n\n`;
              commentBody += `Os detalhes espec√≠ficos de cada issue est√£o nos coment√°rios inline acima. üëÜ`;
            }
            
            // Find existing comment to update or create new
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('üîç SQLFluff Analysis Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
